#Enrutamiento de vehiculos 

from ortools.constraint_solver import routing_enums_pb2
from ortools.constraint_solver import pywrapcp

def creacion_datos_modelo():    #Se definen cuales van a ser los datos del modelo a usar
    datos = {}          #Se guardaran los datos que se ingresaran en el modelo de enrutamiento.
    datos['matriz_distancias'] = [
        [
            0, 16400, 13300, 46500, 15900, 28700, 14300, 18600, 59400, 46500,
        ],
        [
            16400, 0, 19900, 34200, 19200, 38100, 23500, 23200, 42500, 31100
        ],
        [
            13300, 19900, 0, 48700, 23000, 23900, 21200, 26900, 58500, 45600
        ],
        [
            49900, 33100, 47000, 0, 43700, 70900, 46200, 47700, 18100, 3800
        ],
        [
            15500, 17000, 21200, 41700, 0, 40800, 7400,8900, 61200, 38600
        ],
        [
            29200, 38500, 25300, 72000, 41500, 0, 33400, 45400, 81800, 68900
        ],
        [
            14200, 23000, 27100, 47700, 10800, 33700, 0, 55600, 57600, 44600
        ],
        [
            18600, 20300, 24400, 45000, 8000, 44000, 10700, 0, 57100, 41900 
        ],
        [
            59000, 42500, 56400, 15500, 61200, 80300, 55600, 57100, 0, 12300
        ],
        [
            46700, 30800, 44700, 3800, 42500, 68600, 43900, 45400, 12300, 0
        ],
    ]   #En cada una de las siguientes listas aparecen las diferentes distancias que hay entre los puntos,cada lista hace referencia a los diferentes puntos.
    datos['num_vehiculos'] = 2 #Datos de cuantos vehiculos se encuentran en la operacion.
    datos['deposito'] = 0     #Se identifica que el deposito es el sitio de cargue de donde inicia la ruta y finaliza la ruta.
    return datos


def imprimir_solucion(datos, manager, ruta, solucion):  #Se realiza la clase imprime solucion la cual tiene datos,administrador,ruta y la solucion.
    maxima_distancia_ruta = 0  #Se da el valor de la maxima distancia de ruta es igual a cero ya que va a ser una variable que tendra diferentes cambios.
    for vehicle_id in range(datos['num_vehiculos']): #Es el incio de un bucle for el cual da de que el vehiculo id,que es el vehiculo que sera usado,en el rango de vehiculos que hay disponibles que son el numero de vehiculos en la operacion.
        inicio = ruta.Start(vehicle_id)   #Dice que indice ue es tecnicamente el incio de ruta es iGual al inicio de la ruta con el vehiculo id que es el escogio en el bucle.
        plan_produccion = 'Ruta para el vehículo {}:\n'.format(vehicle_id) #Se identifica el plan de ruta que se le asignara al vehiculo
        distancia_ruta = 0   #Varibale de la distacia de la ruta el cual varia segun la ruta del vehiculo de transporte
        while not ruta.IsEnd(inicio):  #Bucle while el cual da a hablar cuando el enrutamiento no es terminado segun el incio de la ruta.
            plan_produccion += ' {} -> '.format(manager.IndexToNode(inicio))  #el plan de ruta asignado sera 
            inicio_previo = inicio #Se almacena los dato del indice que son los datos del inicio de la ruta 
            inicio = solucion.Value(ruta.NextVar(inicio)) #la variable indice cambia y se convierte en que el indice es igual a la evaluacion de la solucion de la ruta 
            distancia_ruta += ruta.GetArcCostForVehicle(inicio_previo, inicio, vehicle_id) #conexion total entre rutas y vehiculos
        plan_produccion += '{}\n'.format(manager.IndexToNode(inicio)) 
        plan_produccion += 'Distancia de la ruta: {}m\n'.format(distancia_ruta) #El resultado de plan de produccion dependera de el indice y la distancia que tiene la ruta.
        print(plan_produccion)  
        maxima_distancia_ruta += distancia_ruta   #La maxima distancia de ruta sera igual o mayor a la distanncia de la ruta 
        maxima_distancia_ruta = max(distancia_ruta, maxima_distancia_ruta)#se realiza como suma de las distancias entre las rutas
    print('Distancia total de todas las rutas: {}m'.format(maxima_distancia_ruta))



def main():
    # Invocar los datos de entrada.
    datos = creacion_datos_modelo()

    # Crea el administrador del índice de rutas.
    manager = pywrapcp.RoutingIndexManager(len(datos['matriz_distancias']),
                                           datos['num_vehiculos'], datos['deposito'])

    # Crea el modelo de enrutamiento.
    ruta = pywrapcp.RoutingModel(manager) 


    # Crea y registra una devolución de llamada de distancia.
    def llamada_de_distancia(del_inicio, al_inicio):
        # Convierte desde la variable de ruta Index hasta la matriz de distancia NodeIndex.
        desde_ubicacion = manager.IndexToNode(del_inicio)
        a_ubicacion = manager.IndexToNode(al_inicio)
        return datos['matriz_distancias'][desde_ubicacion][a_ubicacion]

    inicio_devolucion_llamada = ruta.RegisterTransitCallback(llamada_de_distancia)

    # Define el costo de cada arco.
    ruta.SetArcCostEvaluatorOfAllVehicles(inicio_devolucion_llamada)

    # Adhiere la dimensión de distancia.
    dimension_name = 'Distancia'
    ruta.AddDimension(
        inicio_devolucion_llamada,
        0,  # Sin holgura
        3000000,  # Distancia máxima de viaje del vehículo
        True,  # Iniciar el acumulador en cero
        dimension_name)
    dimension_de_distancia = ruta.GetDimensionOrDie(dimension_name)#Referencia de dimensionammiento de las rutas
    dimension_de_distancia.SetGlobalSpanCostCoefficient(100) #Realiza un costo global en donde se le da un valor de evaluacion en donde segun el valor de evaluacion buscara minimizar los costos de rutas

    # Configurar los parámetros de búsqueda.
    parametros_de_busqueda = pywrapcp.DefaultRoutingSearchParameters()#devuelve los parametros de busqueda los cuales buscara la mejor solucion a la problematica
    parametros_de_busqueda.first_solution_strategy = (
        routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)   #LLamado a estraategias Or en donde busca la primera solucion facil la cual tendra el menor recorrrido en las rutas.

    # Solucionador del problema.
    solucion = ruta.SolveWithParameters(parametros_de_busqueda)

    # Imprimir la solución en la consola.
    if solucion:
        imprimir_solucion(datos, manager, ruta, solucion)
    else:
        print('No se encuentra solución !')


if __name__ == '__main__':
    main()
